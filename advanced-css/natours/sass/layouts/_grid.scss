.row {
  max-width: $grid-width;
  background-color: #eee;
  margin: 0 auto;

  &:not(:last-child) {
    margin-bottom: $gutter-vertical;
  }

  @include clearfix;

  [class^="col-"] {
    background-color: red;
    float: left;

    &:not(:last-child) {
      margin-right: $gutter-horizontal;
    }
  }

  .col-1-of-2 {
    width: calc((100% - #{$gutter-horizontal}) / 2);
    // columnWidth = (totalWidth - gutterWidth) / totalNumberOfColumns
  }

  .col-1-of-3 {
    width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
    /* .col-1-of-3 has 2 gutters, so must be multiplied by 2 before being devided by 3

       columnWidth = ((totalWidth - numberOfGutters * gutterWidth) / totalNumberOfColumns)
    */
  }

  .col-1-of-4 {
    width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
  }

  .col-2-of-3 {
    width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
    /* When columns span across, the calculation changes to account for a gutter missing:

       columnWidth = (columnSpan *((totalWidth - numberOfGutters * gutterWidth)
                      / totalNumberOfColumns) + gutterWidth)
    */
  }

  .col-2-of-4 {
    width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
  }

  .col-3-of-4 {
    width: calc(3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});
    /* Remember $gutter-horizontal is only equal to one gutter, so 2 * #{$gutter-horizontal}
       is needed to account for this */
  }
}
